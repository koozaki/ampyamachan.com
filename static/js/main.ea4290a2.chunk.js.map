{"version":3,"sources":["stylish-portfolio.js","App.js","serviceWorker.js","index.js"],"names":["$","window","jQuery","click","e","preventDefault","toggleClass","this","location","pathname","replace","hostname","target","hash","length","slice","animate","scrollTop","offset","top","removeClass","document","scroll","fadeIn","fadeOut","App","react_default","a","createElement","className","Component","Boolean","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+FAAC,IAACA,KAwCCC,OAAOC,QAtCN,gBAAgBC,MAAM,SAASC,GAC/BA,EAAEC,iBACFL,EAAE,oBAAoBM,YAAY,UAClCN,EAAE,qDAAqDM,YAAY,oBACnEN,EAAEO,MAAMD,YAAY,YAItBN,EAAE,kDAAkDG,MAAM,WACxD,GAAIF,OAAOO,SAASC,SAASC,QAAQ,MAAO,MAAQH,KAAKE,SAASC,QAAQ,MAAO,KAAOT,OAAOO,SAASG,WAAaJ,KAAKI,SAAU,CAClI,IAAIC,EAASZ,EAAEO,KAAKM,MAEpB,IADAD,EAASA,EAAOE,OAASF,EAASZ,EAAE,SAAWO,KAAKM,KAAKE,MAAM,GAAK,MACzDD,OAIT,OAHAd,EAAE,cAAcgB,QAAQ,CACtBC,UAAWL,EAAOM,SAASC,KAC1B,IAAM,kBACF,KAMbnB,EAAE,uCAAuCG,MAAM,WAC7CH,EAAE,oBAAoBoB,YAAY,UAClCpB,EAAE,gBAAgBoB,YAAY,UAC9BpB,EAAE,qDAAqDM,YAAY,sBAIrEN,EAAEqB,UAAUC,OAAO,WACMtB,EAAEO,MAAMU,YAEV,IACnBjB,EAAE,kBAAkBuB,SAEpBvB,EAAE,kBAAkBwB,8JCzBXC,0LAPX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAHHC,cCSEC,QACW,cAA7B9B,OAAOO,SAASG,UAEe,UAA7BV,OAAOO,SAASG,UAEhBV,OAAOO,SAASG,SAASqB,MACvB,2DCXNC,IAASC,OAAOR,EAAAC,EAAAC,cAACO,EAAD,MAASd,SAASe,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ea4290a2.chunk.js","sourcesContent":[";($ => {\n  // Closes the sidebar menu\n  $('.menu-toggle').click(function(e) {\n    e.preventDefault();\n    $('#sidebar-wrapper').toggleClass('active');\n    $('.menu-toggle > .fa-bars, .menu-toggle > .fa-times').toggleClass('fa-bars fa-times');\n    $(this).toggleClass('active');\n  });\n\n  // Smooth scrolling using jQuery easing\n  $('a.js-scroll-trigger[href*=\"#\"]:not([href=\"#\"])').click(function() {\n    if (window.location.pathname.replace(/^\\//, '') === this.pathname.replace(/^\\//, '') && window.location.hostname === this.hostname) {\n      let target = $(this.hash);\n      target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');\n      if (target.length) {\n        $('html, body').animate({\n          scrollTop: target.offset().top\n        }, 1000, 'easeInOutExpo');\n        return false;\n      }\n    }\n  });\n\n  // Closes responsive menu when a scroll trigger link is clicked\n  $('#sidebar-wrapper .js-scroll-trigger').click(function() {\n    $('#sidebar-wrapper').removeClass('active');\n    $('.menu-toggle').removeClass('active');\n    $('.menu-toggle > .fa-bars, .menu-toggle > .fa-times').toggleClass('fa-bars fa-times');\n  });\n\n  // Scroll to top button appear\n  $(document).scroll(function() {\n    const scrollDistance = $(this).scrollTop();\n\n    if (scrollDistance > 100) {\n      $('.scroll-to-top').fadeIn();\n    } else {\n      $('.scroll-to-top').fadeOut();\n    }\n  });\n})(window.jQuery);\n","import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './stylish-portfolio.js';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}